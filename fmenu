#!/bin/zsh
source ~/.config/zsh/user/dirs.zsh
declare -a dir_index=(`echo ${(@k)USER_DIRS[@]} | sort`)
__set_title() { echo -ne "\e]2;$1\007"; }
__reset_title() { echo -ne "\e]2;Terminal\007"; }
__wm_set_rule() { bspc rule -a $CLASS:$INSTANCE -o state=floating &>/dev/null; }
__entries() { for i in ${dir_index[@]}; do echo ${USER_DIRS[$i]}; done; }
__win_float() {
  local app=$1 gui=false
  case $app in
    sxiv)    CLASS=Sxiv;    gui=true;;
    zathura) CLASS=Zathura; gui=true;;
    mpv)     CLASS=mpv;     gui=true;;
    *)       CLASS=$app;;
  esac
  __wm_set_rule
  "$gui" && __intercept &
}
__intercept() {
  local target=~/.cache/floatwin/fmenu
  local timeout=1000 exceeded=false
  counter=0
  while true; do
    new_wid=$(xdo id -d -N $CLASS -n $INSTANCE)
    [[ -n $new_wid ]] && break
    [[ $counter -gt $timeout ]] && { exceeded=true; break; }
    sleep .01; counter=$((counter + 1))
  done
  $exceeded && notify-send.py -t 1000 "Timeout exceeded."
  wid=$new_wid
  W=$(sed -n 1p $target) H=$(sed -n 2p $target)
  X=$(sed -n 3p $target) Y=$(sed -n 4p $target)
  xdotool windowmap $wid windowmove $wid $X $Y windowsize $wid $W $H
  echo $wid >> $target
}
__parse_opt() {
  OPT[2]+="$SYM_OFFSET"
  [[ ${OPT[3]} == "mpv" ]] && { FLAG=(--x11-name=$INSTANCE); return; }
  [[ ${OPT[3]} == "sxiv" ]] && { FLAG=(-N $INSTANCE); return; }
}

_fzf_open() {
  local ignore dir="$1" app="$3"
  local fd_cmd=(fd -tf -H -L -c always)
  local fzf_cmd=(fzf --height=100% -m --ansi --preview=\"preview {}\" --prompt=\"$2\")
  local xargs_cmd=(xargs -ro -d \'\\n\' "$app")
  [[ -n $FLAG ]] && xargs_cmd+=("${FLAG[@]}")
  [[ $dir='/' ]] && ignore=(--ignore-file ~/.config/fd/root); cd $dir
  local res=`eval ${fd_cmd[@]} ${ignore[@]} | eval ${fzf_cmd[@]}`
  [[ -n $res ]] && IFS='' && {
    "$EXEC_FROM_X" && __win_float $app
    __set_title $app
    echo $res | eval "${xargs_cmd[@]}"
    __reset_title
  }; unset IFS
  cd -; zle reset-prompt 2>/dev/null
  zle-line-init 2>/dev/null
}

fzf_open_menu() {
  OPT=(`__entries | fzf --height=100% --prompt="Open: " --with-nth 2,4..`)
  [[ -n $OPT ]] && { __parse_opt; _fzf_open ${OPT[@]}; } || zle reset-prompt 2>/dev/null
}

INSTANCE="fmenu"
EXEC_FROM_X=${1:-false}
fzf_open_menu
